// Code generated by "goconfig -field Phases []config.Phase -option -output config_generated.go"; DO NOT EDIT.

package urlx

import "github.com/berquerant/gbrowse/config"

type ConfigItem[T any] struct {
	modified     bool
	value        T
	defaultValue T
}

func (s *ConfigItem[T]) Set(value T) {
	s.modified = true
	s.value = value
}
func (s *ConfigItem[T]) Get() T {
	if s.modified {
		return s.value
	}
	return s.defaultValue
}
func (s *ConfigItem[T]) Default() T {
	return s.defaultValue
}
func (s *ConfigItem[T]) IsModified() bool {
	return s.modified
}
func NewConfigItem[T any](defaultValue T) *ConfigItem[T] {
	return &ConfigItem[T]{
		defaultValue: defaultValue,
	}
}

type Config struct {
	Phases *ConfigItem[[]config.Phase]
}
type ConfigBuilder struct {
	phases []config.Phase
}

func (s *ConfigBuilder) Phases(v []config.Phase) *ConfigBuilder {
	s.phases = v
	return s
}
func (s *ConfigBuilder) Build() *Config {
	return &Config{
		Phases: NewConfigItem(s.phases),
	}
}

func NewConfigBuilder() *ConfigBuilder { return &ConfigBuilder{} }
func (s *Config) Apply(opt ...ConfigOption) {
	for _, x := range opt {
		x(s)
	}
}

type ConfigOption func(*Config)

func WithPhases(v []config.Phase) ConfigOption {
	return func(c *Config) {
		c.Phases.Set(v)
	}
}
